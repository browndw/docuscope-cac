[tool.poetry]
name = "docuscope"
version = "0.2.1-dev2"
readme = "README.md"
description = "A text analysis tool combining part-of-speech and rhetorical tagging"
authors = [
    "David Brown <dwb2@andrew.cmu.edu>",
    "Sugurua Ishizaki",
    "David Kaufer"
]
license = "Apache-2.0"
homepage = "https://docuscope.github.io"
repository = "https://github.com/browndw/docuscope-ca"
documentation = "https://docuscope.github.io"
classifiers = [
    "Development Status :: 3 - Beta",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Text Processing :: General",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
]

packages = [{ include = "docuscope", from = "lib" }]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
typing-extensions = "*"


# ------- #
# Library #
# ------- #
tqdm = { version = "*", optional = true }            # groups = ["user", "all", "tests"]
watchdog = { version = "*", optional = true }        # groups = ["user", "all"]
python-dateutil = { version = "*", optional = true } # groups = ["user", "all", "tests"]
tomlkit = { version = "*", optional = true }         # groups = ["user", "all", "propagate"]
toml = { version = "*", optional = true }            # groups = ["user", "cli", "all"]

streamlit = { version = "<1.12.0", optional = true }    # groups = ["user", "all"]
streamlit-ace = { version = "*", optional = true }      # groups = ["user", "all"]

altair = { version = "*", optional = true }             # groups = ["user", "all"]
docuscospacy = { version = "*", optional = true }       # groups = ["user", "all"]
docx = { version = "*", optional = true }               # groups = ["user", "all"]
numpy = { version = "*", optional = true }              # groups = ["user", "all"]
pandas = { version = "*", optional = true }             # groups = ["user", "all"]
python_docx = { version = "*", optional = true }        # groups = ["user", "all"]
scikit_learn = { version = "*", optional = true }       # groups = ["user", "all"]
scipy = { version = "*", optional = true }              # groups = ["user", "all"]
streamlit-aggrid = { version = "*", optional = true }   # groups = ["user", "all"]
tmtoolkit = { version = "*", optional = true }          # groups = ["user", "all"]
Unidecode = { version = "*", optional = true }          # groups = ["user", "all"]

# ---- #
# CVEs #
# ---- #

pywin32 = { version = ">=301", optional = true, platform = "win32" } # groups = ["user", "all"]

# ---------------- #
# Machine Learning #
# ---------------- #

spacy = { version = "*", optional = true }              # groups = ["user", "all"]

# ----- #
# Tests #
# ----- #
pytest = { version = "*", optional = true }               # groups = ["all", "tests"]
pytest-sugar = { version = "*", optional = true }         # groups = ["all", "tests"]
hypothesis = { version = "<6", optional = true }          # groups = ["all", "tests"]
astroid = { version = "*", optional = true }              # groups = ["all", "tests"]
psutil = { version = "*", optional = true }               # groups = ["all", "tests"]
pylint = { version = "*", optional = true }               # groups = ["all", "tests"]
pytest-rerunfailures = { version = "*", optional = true } # groups = ["all", "tests"]

# ---------------- #
# Development Only #
# ---------------- #
pre-commit = { version = "*", optional = true }      # groups = ["dev", "all"]
black = { version = "^22.3.0", optional = true }     # groups = ["dev", "all", "propagate"]
mypy = { version = "*", optional = true }            # groups = ["dev", "all"]
rope = { version = "*", optional = true }            # groups = ["dev", "all"]
doc8 = { version = "*", optional = true }            # groups = ["dev", "all"]
readme-renderer = { version = "*", optional = true } # groups = ["dev", "all"]
tabulate = { version = "*", optional = true }        # groups = ["dev", "all"]
pyoxidizer = { version = "*", optional = true }      # groups = ["dev", "all", "build"]


[tool.poetry.extras]
all = [
    "astroid",
    "black",
    "doc8",
    "hypothesis",
    "mypy",
    "pre-commit",
    "psutil",
    "pylint",
    "pyoxidizer",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "python-dateutil",
    "pywin32",
    "readme-renderer",
    "rope",
    "streamlit",
    "streamlit-ace",
    "tabulate",
    "toml",
    "tomlkit",
    "tqdm",
    "watchdog",
    "altair",
    "docuscospacy",
    "docx",
    "numpy",
    "pandas",
    "python_docx",
    "scikit_learn",
    "scipy",
    "spacy",
    "streamlit-aggrid",
    "st_aggrid",
    "tmtoolkit",
    "Unidecode",
]
build = ["pyoxidizer"]
cli = ["toml"]
dev = [
    "black",
    "doc8",
    "mypy",
    "pre-commit",
    "pyoxidizer",
    "readme-renderer",
    "rope",
    "tabulate",
]
propagate = ["black", "tomlkit"]
tests = [
    "astroid",
    "hypothesis",
    "psutil",
    "pylint",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "python-dateutil",
    "tqdm",
]
user = [
    "python-dateutil",
    "pywin32",
    "streamlit",
    "streamlit-ace",
    "toml",
    "tomlkit",
    "tqdm",
    "watchdog",
    "altair",
    "docuscospacy",
    "docx",
    "numpy",
    "pandas",
    "python_docx",
    "scikit_learn",
    "scipy",
    "spacy",
    "streamlit-aggrid",
    "st_aggrid",
    "tmtoolkit",
    "Unidecode",
]

[tool.poetry.scripts]
docuscope = "docuscope.__main__:main"

[tool.isort]
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

known_third_party = ["docuscope._imports"]
known_general_scientific = [
    "altair",
    "docuscospacy",
    "docx",
    "numpy",
    "pandas",
    "python_docx",
    "scikit_learn",
    "streamlit-aggrid",
    "tmtoolkit",
    "Unidecode",
]
known_machine_learning = [
    "spacy",
]
known_streamlit = ["streamlit", "streamlit_ace", "streamlit_analytics"]
kknown_first_party = ["docuscope"]
sections = [
    "STDLIB",
    "THIRDPARTY",
    "GENERAL_SCIENTIFIC",
    "MACHINE_LEARNING",
    "STREAMLIT",
    "FIRSTPARTY",
    "LOCALFOLDER",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
